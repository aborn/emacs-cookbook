#+TITLE: 函数
#+AUTHOR: aborn
#+DATE: 2016-12-04
#+EMAIL: aborn.jiang@gmail.com
#+LANGUAGE: zh
#+LATEX_HEADER: \usepackage{xeCJK}

#+SETUPFILE: ~/github/org-html-themes/setup/theme-readtheorg.setup

-----

* 什么是函数？
  函数是有传入参数的可计算的单元。每个函数的计算结果为函数返回值。大部分计算机语言里，每个函数有
  其自己函数名。从严格意义来说，lisp函数是没有名字的。lisp函数其本质是一个对象，该对象可关联到
  一个标识符（本书把Symbol翻译成标识符）,这个标识符就是函数名。

* 函数定义
  定义一个函数的语法如下：

  #+BEGIN_SRC emacs-lisp
  defun name args [doc] [declare] [interactive] body. . .
  #+END_SRC

** 检查一个函数是否定义
   检查一个变量是否绑定到函数， *fboundp symbol* , 还有一个函数 *(functionp OBJECT)*

   #+BEGIN_SRC emacs-lisp
   (fboundp 'info)                         ; t
   (fboundp 'setq)                         ; t
   (fboundp 'xyz)                          ; nil
   (functionp (lambda () (message "Anonymous Functions")))   ; t
   (fboundp (lambda () (message "Anonymous Functions")))     ; *** Eval error ***
   #+END_SRC

** 函数参数
   有些参数是可选的，当用户没有传时，设置一个默认值，下面是一个例子：
   #+BEGIN_SRC emacs-lisp
   (defun cookbook/fun-option-parameter (a &optional b &rest e)
     (when (null b)
       (message "paramete b is not provided")
       (setq b "ddd"))    ;; set to default value
     (message "a=%s, b=%s" a b))
   #+END_SRC
   函数cookbook/fun-option-parameter中，a为必传参数，b为可选择参数，e为其余参数，当实际传
   入的参数大于2时，其他参数将组成一个list绑定到e上。

* 函数调用
  函数的调用有两种方式, *funcall* 和 *apply*

** funcall
   funcall它的语法如下：

   #+BEGIN_SRC emacs-lisp
   funcall function &rest arguments
   #+END_SRC

   因为funcall本身是一个函数，因此funcall在调用前，它的所有参数都将事先做求值运算。
   注意参数 *function* 必须为一个Lisp函数或者原生函数，不能为Special Forms或者宏(可以为lamda匿名函数)。

** apply
   apply的语法如下：

   #+BEGIN_SRC emacs-lisp
   apply function &rest arguments
   #+END_SRC

   它与funcall功能类似，唯一不同的是它的arguments是一个列表对象。

* 特殊类型(special forms)和宏
  有些与函数看起来很像的类型，它们也接受参数，同时计算出结果。但在Elisp里，他们不被当成函数，下
  面给出简单介绍：

** lambda表达式
   lambda表达式是用lisp编写的函数对象，通常称之为匿名函数，它的定义如下：
   #+BEGIN_SRC emacs-lisp
   (lambda (arg-variables...)
           [documentation-string]
           [interactive-declaration]
           body-forms...)
   #+END_SRC
   第一个元素为lambda，表示这个列表代表一个函数。

   下面是一个例子：
   #+BEGIN_SRC emacs-lisp
   (lambda (x)
       "Return the hyperbolic cosine of X."
       (* 0.5 (+ (exp x) (exp (- x)))))
   #+END_SRC
   上面的表达式被计算成一个函数对象。

** 内建函数(primitive)
   是用C语言写的，可被调用的函数；

** special form
   一种类型的内建函数，如if, and 和while
