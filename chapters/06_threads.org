#+TITLE: 多线程
#+AUTHOR: aborn
#+DATE: 2018-05-29
#+EMAIL: aborn.jiang@gmail.com
#+LANGUAGE: zh
#+LATEX_HEADER: \usepackage{xeCJK}

#+SETUPFILE: ~/github/org-html-themes/setup/theme-readtheorg.setup

-----

* 多线程
  Emacs从26.1版本开始引入了[[https://www.gnu.org/software/emacs/draft/manual/html_node/elisp/Threads.html][多线程]] 。它提供了一种简单（但功能有限）多线程操作。跟其他编程语言一
  样，在同一个Emacs实例里所有的线程的内存是共享的。每个线程有其自己运行Buffer(Current Buffer)
  和对应的数据(Match Data)。注意：下面的文档都是参考Emacs的草案手册。

* 基本的线程相关函数
  下面介绍线程操作相关的[[https://www.gnu.org/software/emacs/draft/manual/html_node/elisp/Basic-Thread-Functions.html#Basic-Thread-Functions][基本函数]]。

** 创建线程
   我们可以通过 *make-thread* 函数来创建线程并执行对应的task。它的语法如下:
   #+BEGIN_SRC emacs-lisp
  (make-thread function &optional name)
   #+END_SRC
   创建一个名为name的线程，该线程执行function函数，当函数执行结束后，退出该线程。新线程的Current
   Buffer继承当前Buffer，这个函数返回一个线程对象。可以通过 *(threadp object)* 来判断一个对
   象是否为线程对象。

** thread-join
   thread-join，它阻塞当前执行直到线程执行完成，如果线程已经退出，它立刻返回。
   #+BEGIN_SRC emacs-lisp
   (thread-join thread)
   #+END_SRC

** thread-yield
   执行下一个可执行的线程。

** 获取线程名
   可以通过(thread-name thread)函数来获取线程名。

** 线程状态
   判断一个线程是否还在执行(alive)，可以用(thread-alive-p thread)。

** 当前线程
   (current-thread)返回当前线程。

** 所有线程列表
   获取当前所有正在运行中的线程(all-threads)。

* 互斥锁(Mutexes)
  [[https://www.gnu.org/software/emacs/draft/manual/html_node/elisp/Mutexes.html][互斥]] 是一种排它锁(exclusive lock)，在任何时刻，最多只允许一个线程持有互斥锁。也就是说，当一个线
  程试图获取一个已经被其他线程持有的互斥锁时，它会引发阻塞，直到该互斥锁被释放为止。

** 创建一个互斥锁
   创建一个互斥锁对象，采用 *make-mutes* 函数，该函数返回一个互斥锁对象，其名字为name。
   #+BEGIN_SRC emacs-lisp
   (make-mutex &optional name)
   #+END_SRC
   判断一个对象是否为互斥锁使用(mutexp object)。

** 获取/释放互斥锁
   #+BEGIN_SRC emacs-lisp
  （mutex-unlock mutex）
   #+END_SRC
   这个操作会引发阻塞，直到当前线程获取互斥锁为止。与之相对的有(mutex-unlock mutex)释放互斥
   锁操作。

** with-mutex
   #+BEGIN_SRC emacs-lisp
   (with-mutex mutex body)
   #+END_SRC
   这是一个宏操作，它首先获取一个互斥锁，然后执行body里的行为，最后释放互斥锁。

* 条件变量(Condition Variables)
  [[https://www.gnu.org/software/emacs/draft/manual/html_node/elisp/Condition-Variables.html][条件变量]] 提供线程阻塞直到某个事件发生的机制。线程可以等待一个条件变量，直到别的线程触发这个条件
  才唤醒。条件变量在某些情况下往往与互斥机制相关联。下面是一个例子：
  #+BEGIN_SRC emacs-lisp
  (with-mutex mutex
    (while (not global-variable)
      (condition-wait cond-var)))
  #+END_SRC
  这里互斥锁保证了原子性。
  #+BEGIN_SRC emacs-lisp
  (with-mutex mutex
    (setq global-variable (some-computation))
    (condition-notify cond-var))
  #+END_SRC

** 创建条件变量
   创建条件变量的函数如下：
   #+BEGIN_SRC emacs-lisp
   (make-condition-variable mutex &optional name)
   #+END_SRC
   创建一个与互斥锁mutex的条件变量，其名字为name。判断一个对象是否为条件变量使用
   (condition-variable-p object)

** 条件等待
   #+BEGIN_SRC emacs-lisp
   (condition-wait cond)
   #+END_SRC
