#+TITLE: 文件
#+AUTHOR: aborn
#+DATE: 2018-04-08
#+EMAIL: aborn.jiang@gmail.com
#+LANGUAGE: zh
#+LATEX_HEADER: \usepackage{xeCJK}

#+SETUPFILE: ~/github/org-html-themes/setup/theme-readtheorg.setup

-----

* 文件及访问
  文件是操作系统永久保存数据的单元，为了编辑文件，我们必要告诉Emacs去读取一个文件，并将文件的内
  容保存在一个Buffer里，这样Buffer与文件就关联在一起。下面介绍与文件访问相关的函数，由于历史原
  因这些函数的命令都是以 *find-* 开头的，不是以 *visit-* 开头。

** 打开文件
   如果想在buffer里打开一个文件，其命令是 *find-file* (C-x C-f)。当文件已经在buffer中存在时，
   这个命令返回文件对应的buffer。如果当前没有buffer对应文件，则，创建一个buffer，并将其文件
   内容读到buffer中，并返回这个buffer。字义如下:

   #+BEGIN_SRC emacs-lisp
   (find-file filename &optional wildcards)
   #+END_SRC

   这个函数有一个对应的hook变量，叫 *find-file-hook* 它的值是一个函数列表。这些函数在文件被
   打开后依次执行。

** 文件保存
   文件被载入到buffer后，我们可以对其进行修改；修改完了后，将内容保存回文件，其对应的函数为：

   #+BEGIN_SRC emacs-lisp
   (save-buffer &optional backup-option)
   #+END_SRC

   文件保存对应有两个hook变量，为： *before-save-hook* 和 *after-save-hook* 分别表示保
   存前的hook函数列表和保存后的hook函数列表。与之类似的还有一个函数 *write-file*

   #+BEGIN_SRC emacs-lisp
   (write-file  filename &optional confirm)
   #+END_SRC
   这个函数的功能是将当前buffer的内容写入到filename对应的文件中，并将当前buffer与这个文件进
   行关联

** 读取文件内容(Reading from Files)
   将文件内容复制到buffer，可以使用 *insert-file-contents* 函数，注意在Lisp代码里不要使用
   *insert-file* 命令，因为它会设置mark标识。

   #+BEGIN_SRC emacs-lisp
   (insert-file-contents filename &optional visit beg end replace)
   #+END_SRC
   这个函数在当前buffer的位置插入文件 *filename* 的内容，它返回一个它包含一个文件名和数据长度
   信息的列表。如果文件不存在(或不可读)，则会抛出错误异常!当这个函数执行后会调用 *after-insert-file-functions*
   列表里的函数。一般情况下，在这个列表里的函数其中有一个是用来检测文件内容的编码。与这个函数类似
   的一个函数为(insert-file-contents-literally filename &optional visit beg end [Function] replace)
   ，它们唯一的区别的后者不内容进行格式化、不对字符做转换。

   如果参数visit不是nil时，执行这个函数后会将当前buffer设置为未修改（unmodified）状态。

** 往文件里写内容(Writing to Files)
   将buffer里的内容（或者部分内容）直接写入到一个文件，可以采用 *append-to-file* 和 *write-region*
   函数。注意这里不要写入正在访问的文件，否则会出现异常情况：

   #+BEGIN_SRC emacs-lisp
   (append-to-file start end filename)
   #+END_SRC
   这个函数的作用是将当前buffer里的部分内容（从start到end部分内容）追加到文件 *filename* 的
   后面。如果是在lisp中使用，这个函数完全等价于 (write-region start end filename t)。

   #+BEGIN_SRC emacs-lisp
   (write-region start end filename &optional append visit lockname mustbenew)
   #+END_SRC
   这个函数的作用与append-to-file类似，不过其参数更多。
   1. 当start为nil时，这个函数写入的是当前buffer所有内容，这时end参数没有用;
   2. 当start为string时，这个函数写入的内容是string的内容，这时end参数失效;
   3. 当append不是nil时，表示往现有文件里进行追加，当append是一个数字时，表示从当前文件开始到append的位置开始写入。
   4. 当mustbenew不为nil时，当覆盖已有文件时，会询问用户，并获得用户确定后再操作。

   #+BEGIN_SRC emacs-lisp
   (with-temp-file file body)
   #+END_SRC
   *with-temp-file* 是一个宏操作，它将创建一个临时buffer作为当前buffer，在这个buffer里对
   body进行求值，最后将这个buffer的内容写入到文件 *file* 里。当整个body执行完成后，Emacs将
   会把这个临时buffer关闭，恢复到执行with-temp-file之前的当前buffer。它将body的最后执行结
   果作为with-temp-file的返回结果。

* 文件锁
  当多个用户同时修改一个文件里，这时候需要文件锁。Emacs里的文件锁是保存在同一目录下的一个文件，
  它有一个特殊的名字.

  #+BEGIN_SRC emacs-lisp
  (file-locked-p filename)
  #+END_SRC
  *file-locked-p* 这个函数用来检查文件是否被锁。当文件没有被锁，则返回nil；如果被Emacs进程
  锁了，则返回t，当被其他job锁了，则返回使用都信息。

  #+BEGIN_SRC emacs-lisp
  (lock-buffer &optional filename)
  #+END_SRC
  如果当前buffer被修改过，这个函数锁定当前buffer所关联的文件。与之相对应的操作有解锁，可以使用
  (unlock-buffer) 这个函数。

  #+BEGIN_SRC emacs-lisp
  (ask-user-about-lock file other-user)
  #+END_SRC
  当一个用户修改正在被另一个用户锁定的文件时，询问用户。该函数的返回值（即用户的选择），决定Emacs
  接下来该如何执行。

* 文件基本信息函数
  下面介绍一些与文件基本信息相关的函数

** 文件是否存在
   判断一个文件是否存在采用 *file-exists-p* 这个函数:
   #+BEGIN_SRC emacs-lisp
  (file-exists-p filename)
   #+END_SRC
   与之类似的有: *file-readable-p* 、 *file-executable-p* 、 *file-writable-p* 、
   *file-directory-p* *file-symlink-p* 这几个函数。

** 文件新旧比较
   #+BEGIN_SRC emacs-lisp
   (file-newer-than-file-p filename1 filename2)
   #+END_SRC
   当filename1比filename2新时，该函数返回t。如果filename1不存在，则返回nil。如果filename1
   存在，但filename2不存在，则返回t。

** 文件模式
   #+BEGIN_SRC emacs-lisp
   (file-modes filename)
   #+END_SRC
   这个函数返回文件的属性，跟linux里的chmod命令相对应，它返回的是一个整数：它包含了文件的读、
   写和可执行权限。
   #+BEGIN_SRC emacs-lisp
   (file-modes "~/junk/diffs")   ;; ⇒ 492 ; Decimal integer.
   #+END_SRC

** 文件属性
   这小节介绍与文件属性有关的一些函数，如文件的所属人、所属组、文件大小、文件的最新读取和修改时
   间等。
   #+BEGIN_SRC emacs-lisp
   (file-attributes filename &optional id-format)
   #+END_SRC
   这个函数返回文件对应的属性列表，下面是一个调用示例：
   #+BEGIN_SRC emacs-lisp
   (file-attributes "~/tree.txt")
   ;; 返回如下
   (nil 1 501 20
        (23331 5030 438781 943000)
        (23331 4821 822935 764000)
        (23331 4821 822935 764000)
        10496 "-rw-r--r--" t 8602715307 16777220)
   #+END_SRC
   属性列表按顺序说明如下：
   0. t 表示目录，字符串表示符号链接，nil 为文本文件；
   1. 这个文件有多少名字与之关联，一般为1，当有符号链接时不一样；
   2. 文件的UID;
   3. 文件的GID;
   4. 文件最近accessTime，有4个元素的列表(sec-high sec-low microsec picosec);
   5. 文件最后修改时间；
   6. 文件状态最后被修改时间；主要是用chmod来改变文件模式;
   7. 文件大小，单位byte;
   8. 文件模式；
   9. 未使用值，主要用来做向下兼容；
   10. 文件的inode编码；
   11. 设备的文件系统码；
* 文件操作
** 改变文件名和属性
   文件重命名函数为 *rename-file*
   #+BEGIN_SRC emacs-lisp
   (rename-file filename newname &optional ok-if-already-exists)
   #+END_SRC

   复制文件函数为 *copy-file*
   #+BEGIN_SRC emacs-lisp
   (copy-file oldname newname &optional ok-if-exists time
    preserve-uid-gid preserve-extended-attributes)
   #+END_SRC
   这个函数的作用是复制老的文件 *oldname* 到新的文件 *newname*, 这里有一点要注意的是如果新的
   文件名 *newname* 为目录，则复制老的文件到这个目录（文件名保持为 *oldname* 不变）。当参数
   time不为nil时，则新文件保持与老文件相同的最后修改时间属性信息。

* 文件查找
** locate-file
   #+BEGIN_SRC emacs-lisp
   (locate-file filename path &optional suffixes predicate)
   #+END_SRC
   *locate-file* 这个函数用来查找在path目录下文件名为filename的文件，如果找到则返回绝对文件
   名。注意第二个参数path必需为目录列表，像 *exec-path* 对应的列表一样。下面是一个例子：
   #+BEGIN_SRC emacs-lisp
   (locate-file "03_file.org" '("/Users/aborn/github/emacs-cookbook/chapters/"))
   ;; "/Users/aborn/github/emacs-cookbook/chapters/03_file.org"
   (locate-file "03_file" '("/Users/aborn/github/emacs-cookbook/chapters/") '(".tex" ".org"))
   ;; "/Users/aborn/github/emacs-cookbook/chapters/03_file.tex"
   #+END_SRC
   可选参数 suffixes 为后缀列表，查找所有后缀，以第一个查到为准。注意，这里的文件查找只会查找
   path目录，不会查找其子目录。

** executable-find
   #+BEGIN_SRC emacs-lisp
   (executable-find program)
   #+END_SRC
   executable-find用于查找可执行文件，查找所有 *exec-path* 目录下的可执行文件（以及查找所
   有后缀为exec-suffixes列表里的可执行文件），下面是一个例子:
   #+BEGIN_SRC emacs-lisp
   (executable-find "emacs")
   ;; "/usr/local/bin/emacs"
   #+END_SRC

* 文件与目录
  判断文件是否在一个目录下，怎么做?

  #+BEGIN_SRC emacs-lisp
  (file-in-directory-p  file dir)
  #+END_SRC

  如果file是一个在目录dir或者dir子目录下的文件，则返回t。如果file与dir处于同一目录，也返回t。
  如果想列出一个目录下的所有文件，那就要用到 *directory-files* 这个函数，其定义如下：

  #+BEGIN_SRC emacs-lisp
  (directory-files directory &optional full-name match-regexp nosort)
  #+END_SRC

  这个函数按字母顺序返回目录 directory 下的所有文件。参数 full-name 不为nil时，则返回每个文
  件的绝对路径，否则返回相对路径。match-regexp 如果不是nil，该函数返回只与match-regexp相匹
  配的文件列表。nosort如果不为nil，则不按字母排序。

** 创建、复制和删除目录
   对目录的创建、复制和删除都有相关的处理函数，下面一一介绍：

   #+BEGIN_SRC emacs-lisp
   (make-directory dirname &optional parents)
   #+END_SRC
   *make-directory* 创建一个目录名为dirname的目录

* 文件名
  下面介绍一些与文件名操作有关的函数

  #+BEGIN_SRC emacs-lisp
  (file-name-directory filename)
  #+END_SRC

  *file-name-directory* 返回的文件名里的目录部分，如果文件名里没有包含目录部分，则返回nil。
  与这个函数对应的一个函数为 *file-name-nondirectory* ，它返回非目录部分。

** 文件路径
   *expand-file-name* 这个函数将文件名转成绝对文件名：

   #+BEGIN_SRC emacs-lisp
   (expand-file-name filename &optional directory)
   #+END_SRC

   如果directory参数存在，将filename作为其相对路径，否则使用 *default-directory* 变量。
   这个函数在写elisp代码时经常用到，下面是一些例子:

   #+BEGIN_SRC emacs-lisp
   (expand-file-name "foo")
   ;; ⇒ "/xcssun/users/rms/lewis/foo"
   (expand-file-name "../foo")
   ;; ⇒ "/xcssun/users/rms/foo"
   (expand-file-name "foo" "/usr/spool/") ⇒ "/usr/spool/foo"
   #+END_SRC

   与expand-file-name相似的函数还有 *file-truename* 这个函数
   #+BEGIN_SRC emacs-lisp
   (file-truename filename)
   #+END_SRC
   下面是一些例子
   #+BEGIN_SRC emacs-lisp
   (file-truename "~/tree.txt")       ;;  "/Users/aborn/tree.txt"
   (file-truename "../tree.txt")      ;; "/Users/tree.txt"
   (file-truename "../../tree.txt")   ;; "/tree.txt"
   #+END_SRC
